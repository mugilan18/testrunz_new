import json
import math
class NT:
    def __init__(self, arg):
        self.arg = arg
    def K_type(self):
        argument = self.arg[:]
        Vin1 = 1*1
        T1 = (float(argument[4])/float(argument[3]))*360
        T2 = (float(argument[8])/float(argument[7]))*360
        T3 = (float(argument[12])/float(argument[11]))*360
        T4 = (float(argument[16])/float(argument[15]))*360
        T5 = (float(argument[20])/float(argument[19]))*360
        T6 = (float(argument[24])/float(argument[23]))*360
        dB1 = 20*math.log((float(argument[2])*2)/Vin1)
        dB2 = 20*math.log((float(argument[6])*2)/Vin1)
        dB3 = 20*math.log((float(argument[10])*2)/Vin1)
        dB4 = 20*math.log((float(argument[14])*2)/Vin1)
        dB5 = 20*math.log((float(argument[18])*2)/Vin1)
        dB6 = 20*math.log((float(argument[22])*2)/Vin1)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6)/6
        Vin2 = 1*1
        t1 = (float(argument[28])/float(argument[27]))*360
        t2 = (float(argument[32])/float(argument[31]))*360
        t3 = (float(argument[36])/float(argument[35]))*360
        t4 = (float(argument[40])/float(argument[39]))*360
        t5 = (float(argument[44])/float(argument[43]))*360
        t6 = (float(argument[48])/float(argument[47]))*360
        db1 = 20*math.log((float(argument[26])*2)/Vin2)
        db2 = 20*math.log((float(argument[30])*2)/Vin2)
        db3 = 20*math.log((float(argument[34])*2)/Vin2)
        db4 = 20*math.log((float(argument[38])*2)/Vin2)
        db5 = 20*math.log((float(argument[42])*2)/Vin2)
        db6 = 20*math.log((float(argument[46])*2)/Vin2)
        db=(db1+db2+db3+db4+db5+db6)/6
        Vin3 = 2*1
        o1 = (float(argument[52])/float(argument[51]))*360
        o2 = (float(argument[56])/float(argument[55]))*360
        o3 = (float(argument[60])/float(argument[59]))*360
        o4 = (float(argument[64])/float(argument[63]))*360
        o5 = (float(argument[68])/float(argument[67]))*360
        o6 = (float(argument[72])/float(argument[71]))*360
        g1 = 20*math.log((float(argument[50])*2)/Vin3)
        g2 = 20*math.log((float(argument[54])*2)/Vin3)
        g3 = 20*math.log((float(argument[58])*2)/Vin3)
        g4 = 20*math.log((float(argument[62])*2)/Vin3)
        g5 = 20*math.log((float(argument[66])*2)/Vin3)
        g6 = 20*math.log((float(argument[70])*2)/Vin3)
        g=(g1+g2+g3+g4+g5+g6)/6
        Vin4 = 2*1
        O1 = (float(argument[76])/float(argument[75]))*360
        O2 = (float(argument[80])/float(argument[79]))*360
        O3 = (float(argument[84])/float(argument[83]))*360
        O4 = (float(argument[88])/float(argument[87]))*360
        O5 = (float(argument[92])/float(argument[91]))*360
        O6 = (float(argument[96])/float(argument[95]))*360
        G1 = 20*math.log((float(argument[74])*2)/Vin4)
        G2 = 20*math.log((float(argument[78])*2)/Vin4)
        G3 = 20*math.log((float(argument[82])*2)/Vin4)
        G4 = 20*math.log((float(argument[86])*2)/Vin4)
        G5 = 20*math.log((float(argument[90])*2)/Vin4)
        G6 = 20*math.log((float(argument[94])*2)/Vin4)
        G=(G1+G2+G3+G4+G5+G6)/6
        print(json.dumps({"length":[{"Result":"Thus  the constant and low pass and high pass filter has been constructed and graph for the response is plotted"}], "breadth":[{"Low pass (T-SECTION)" : str(dB)}], "width":[{"Low pass (Pi-SECTION)" : str(db)}],"widh":[{"High pass (T-SECTION)" : str(g)}],"wid":[{"High pass (Pi-SECTION)" : str(G)}]}))
    def Band(self):
        argument = self.arg[:]
        Vin1 = 1*2
        T1 = (float(argument[4])/float(argument[3]))*360
        T2 = (float(argument[8])/float(argument[7]))*360
        T3 = (float(argument[12])/float(argument[11]))*360
        T4 = (float(argument[16])/float(argument[15]))*360
        T5 = (float(argument[20])/float(argument[19]))*360
        T6 = (float(argument[24])/float(argument[23]))*360
        dB1 = 20*math.log((float(argument[2])*2)/Vin1)
        dB2 = 20*math.log((float(argument[6])*2)/Vin1)
        dB3 = 20*math.log((float(argument[10])*2)/Vin1)
        dB4 = 20*math.log((float(argument[14])*2)/Vin1)
        dB5 = 20*math.log((float(argument[18])*2)/Vin1)
        dB6 = 20*math.log((float(argument[22])*2)/Vin1)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6)/6
        Vin2 = 1*2
        t1 = (float(argument[28])/float(argument[27]))*360
        t2 = (float(argument[32])/float(argument[31]))*360
        t3 = (float(argument[36])/float(argument[35]))*360
        t4 = (float(argument[40])/float(argument[39]))*360
        t5 = (float(argument[44])/float(argument[43]))*360
        t6 = (float(argument[48])/float(argument[47]))*360
        db1 = 20*math.log((float(argument[26])*2)/Vin2)
        db2 = 20*math.log((float(argument[30])*2)/Vin2)
        db3 = 20*math.log((float(argument[34])*2)/Vin2)
        db4 = 20*math.log((float(argument[38])*2)/Vin2)
        db5 = 20*math.log((float(argument[42])*2)/Vin2)
        db6 = 20*math.log((float(argument[46])*2)/Vin2)
        db=(db1+db2+db3+db4+db5+db6)/6
        Vin3 = 2*1
        o1 = (float(argument[52])/float(argument[51]))*360
        o2 = (float(argument[56])/float(argument[55]))*360
        o3 = (float(argument[60])/float(argument[59]))*360
        o4 = (float(argument[64])/float(argument[63]))*360
        o5 = (float(argument[68])/float(argument[67]))*360
        o6 = (float(argument[72])/float(argument[71]))*360
        g1 = 20*math.log((float(argument[50])*2)/Vin3)
        g2 = 20*math.log((float(argument[54])*2)/Vin3)
        g3 = 20*math.log((float(argument[58])*2)/Vin3)
        g4 = 20*math.log((float(argument[62])*2)/Vin3)
        g5 = 20*math.log((float(argument[66])*2)/Vin3)
        g6 = 20*math.log((float(argument[70])*2)/Vin3)
        g=(g1+g2+g3+g4+g5+g6)/6
        Vin4 = 2*1
        O1 = (float(argument[76])/float(argument[75]))*360
        O2 = (float(argument[80])/float(argument[79]))*360
        O3 = (float(argument[84])/float(argument[83]))*360
        O4 = (float(argument[88])/float(argument[87]))*360
        O5 = (float(argument[92])/float(argument[91]))*360
        O6 = (float(argument[96])/float(argument[95]))*360
        G1 = 20*math.log((float(argument[74])*2)/Vin4)
        G2 = 20*math.log((float(argument[78])*2)/Vin4)
        G3 = 20*math.log((float(argument[82])*2)/Vin4)
        G4 = 20*math.log((float(argument[86])*2)/Vin4)
        G5 = 20*math.log((float(argument[90])*2)/Vin4)
        G6 = 20*math.log((float(argument[94])*2)/Vin4)
        G=(G1+G2+G3+G4+G5+G6)/6
        print(json.dumps({"length":[{"Result":"Thus the constant and band pass and band stop filter has been constructed and response curve have been plotted"}], "breadth":[{"K-type band pass(T-sec)" : str(dB)}], "width":[{"Band pass (Pi-SECTION)" : str(db)}],"widh":[{"Band stop(T-sec)" : str(g)}],"wid":[{"Band stop (Pi-SECTION)" : str(G)}]}))
    def Design(self):
        argument = self.arg[:]
        Vin1 = 1*2
        T1 = (float(argument[4])/(float(argument[3])*0.5))*360
        T2 = (float(argument[8])/(float(argument[7])*0.5))*360
        T3 = (float(argument[12])/(float(argument[11])*0.5))*360
        T4 = (float(argument[16])/(float(argument[15])*0.5))*360
        T5 = (float(argument[20])/(float(argument[19])*0.5))*360
        T6 = (float(argument[24])/(float(argument[23])*0.5))*360
        dB1 = 20*math.log((float(argument[2])*2)/Vin1)
        dB2 = 20*math.log((float(argument[6])*2)/Vin1)
        dB3 = 20*math.log((float(argument[10])*2)/Vin1)
        dB4 = 20*math.log((float(argument[14])*2)/Vin1)
        dB5 = 20*math.log((float(argument[18])*2)/Vin1)
        dB6 = 20*math.log((float(argument[22])*2)/Vin1)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6)/6
        Vin2 = 1*1
        t1 = (float(argument[28])/float(argument[27]))*360
        t2 = (float(argument[32])/float(argument[31]))*360
        t3 = (float(argument[36])/float(argument[35]))*360
        t4 = (float(argument[40])/float(argument[39]))*360
        t5 = (float(argument[44])/float(argument[43]))*360
        t6 = (float(argument[48])/float(argument[47]))*360
        db1 = 20*math.log((float(argument[26])*1)/Vin2)
        db2 = 20*math.log((float(argument[30])*1)/Vin2)
        db3 = 20*math.log((float(argument[34])*1)/Vin2)
        db4 = 20*math.log((float(argument[38])*1)/Vin2)
        db5 = 20*math.log((float(argument[42])*1)/Vin2)
        db6 = 20*math.log((float(argument[46])*1)/Vin2)
        db=(db1+db2+db3+db4+db5+db6)/6
        Vin3 = 2*1
        o1 = ((float(argument[52]))/(float(argument[51])*0.5))*360
        o2 = ((float(argument[56]))/(float(argument[55])*0.5))*360
        o3 = ((float(argument[60]))/(float(argument[59])*0.5))*360
        o4 = ((float(argument[64]))/(float(argument[63])*0.5))*360
        o5 = ((float(argument[68]))/(float(argument[67])*0.5))*360
        o6 = ((float(argument[72]))/(float(argument[71])*0.5))*360
        g1 = 20*math.log((float(argument[50])*2)/Vin3)
        g2 = 20*math.log((float(argument[54])*2)/Vin3)
        g3 = 20*math.log((float(argument[58])*2)/Vin3)
        g4 = 20*math.log((float(argument[62])*2)/Vin3)
        g5 = 20*math.log((float(argument[66])*2)/Vin3)
        g6 = 20*math.log((float(argument[70])*2)/Vin3)
        g=(g1+g2+g3+g4+g5+g6)/6
        Vin4 = 2*1
        O1 = ((float(argument[76])*0.5)/(float(argument[75])*0.3))*360
        O2 = ((float(argument[80])*0.5)/(float(argument[79])*0.3))*360
        O3 = ((float(argument[84])*0.5)/(float(argument[83])*0.3))*360
        O4 = ((float(argument[88])*0.5)/(float(argument[87])*0.3))*360
        O5 = ((float(argument[92])*0.5)/(float(argument[91])*0.3))*360
        O6 = ((float(argument[96])*0.5)/(float(argument[95])*0.3))*360
        G1 = 20*math.log((float(argument[74])*2)/Vin4)
        G2 = 20*math.log((float(argument[78])*2)/Vin4)
        G3 = 20*math.log((float(argument[82])*2)/Vin4)
        G4 = 20*math.log((float(argument[86])*2)/Vin4)
        G5 = 20*math.log((float(argument[90])*2)/Vin4)
        G6 = 20*math.log((float(argument[94])*2)/Vin4)
        G=(G1+G2+G3+G4+G5+G6)/6
        print(json.dumps({"length":[{"Result":"Thus  the k type IPF and HPF are constructed On Corresponding  have obtained"}], "breadth":[{"M derived LPF (1-SEC)" : str(dB)}], "width":[{"M derived LPF (2-SEC)" : str(db)}],"widh":[{"M derived HPF (1-SEC)" : str(g)}],"wid":[{"M derived HPF (2-SEC)" : str(G)}]}))
    def Switched(self):
        argument = self.arg[:]
        Vin1 = 1*2
        T1 = (float(argument[4])/float(argument[3]))*360
        T2 = (float(argument[8])/float(argument[7]))*360
        T3 = (float(argument[12])/float(argument[11]))*360
        T4 = (float(argument[16])/float(argument[15]))*360
        T5 = (float(argument[20])/float(argument[19]))*360
        T6 = (float(argument[24])/float(argument[23]))*360
        dB1 = 20*math.log((float(argument[2])*2)/Vin1)
        dB2 = 20*math.log((float(argument[6])*2)/Vin1)
        dB3 = 20*math.log((float(argument[10])*2)/Vin1)
        dB4 = 20*math.log((float(argument[14])*2)/Vin1)
        dB5 = 20*math.log((float(argument[18])*2)/Vin1)
        dB6 = 20*math.log((float(argument[22])*2)/Vin1)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6)/6
        print(json.dumps({"length":[{"Result":"Thus the twin T network was constructed and corresponding frequency and [phase response curves were obtained."}], "breadth":[{"Gain in db" : str(dB)}]}))
    def LC(self):
        argument = self.arg[:]
        Vin=2*0.5
        G1 = (float(argument[2])*0.5)/Vin
        G2 = (float(argument[4])*0.5)/Vin
        G3 = (float(argument[6])*0.5)/Vin
        G4 = (float(argument[8])*0.5)/Vin
        G5 = (float(argument[10])*0.5)/Vin
        G6 = (float(argument[12])*0.5)/Vin
        DB1 = 20*math.log(G1)
        DB2 = 20*math.log(G2)
        DB3 = 20*math.log(G3)
        DB4 = 20*math.log(G4)
        DB5 = 20*math.log(G5)
        DB6 = 20*math.log(G6)
        DB=(DB1+DB2+DB3+DB4+DB5+DB6)/6
        Vin=2*0.5
        g1 = (float(argument[14])*0.5)/Vin
        g2 = (float(argument[16])*0.5)/Vin
        g3 = (float(argument[18])*0.5)/Vin
        g4 = (float(argument[20])*0.5)/Vin
        g5 = (float(argument[22])*0.5)/Vin
        g6 = (float(argument[24])*0.5)/Vin
        dB1 = 20*math.log(g1)
        dB2 = 20*math.log(g2)
        dB3 = 20*math.log(g3)
        dB4 = 20*math.log(g4)
        dB5 = 20*math.log(g5)
        dB6 = 20*math.log(g6)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6)/6
        print(json.dumps({"length":[{"Result":"Thus LC Resonant  circuit  was Constructor and corresponding output waveform have obtained a graph for plotting."}], "breadth":[{"Gain in db1" : str(DB)}], "bread":[{"Gain in db2" : str(dB)}]}))
    def Open(self):
    	print(json.dumps({"answer":[{"Result":"Thus the open circuit impedance parameter and ABCD parameter  of transmission line was contructed and output was taken."}]}))
    def Equalizer(self):
        argument = self.arg[:]
        Vin=1*1
        G1 = (float(argument[2])*0.2)/Vin
        G2 = (float(argument[4])*0.2)/Vin
        G3 = (float(argument[6])*0.2)/Vin
        G4 = (float(argument[8])*0.2)/Vin
        G5 = (float(argument[10])*0.2)/Vin
        G6 = (float(argument[12])*0.2)/Vin
        G7 = (float(argument[14])*0.2)/Vin
        G8 = (float(argument[16])*0.2)/Vin
        G9 = (float(argument[18])*0.2)/Vin
        DB1 = 20*math.log(G1)
        DB2 = 20*math.log(G2)
        DB3 = 20*math.log(G3)
        DB4 = 20*math.log(G4)
        DB5 = 20*math.log(G5)
        DB6 = 20*math.log(G6)
        DB7 = 20*math.log(G7)
        DB8 = 20*math.log(G8)
        DB9 = 20*math.log(G9)
        DB=(DB1+DB2+DB3+DB4+DB5+DB6+DB7+DB8+DB9)/9
        Vin=1*1
        g1 = (float(argument[20])*0.2)/Vin
        g2 = (float(argument[22])*0.2)/Vin
        g3 = (float(argument[24])*0.2)/Vin
        g4 = (float(argument[26])*0.2)/Vin
        g5 = (float(argument[28])*0.2)/Vin
        g6 = (float(argument[30])*0.2)/Vin
        g7 = (float(argument[32])*0.2)/Vin
        g8 = (float(argument[34])*0.2)/Vin
        g9 = (float(argument[36])*0.2)/Vin
        dB1 = 20*math.log(g1)
        dB2 = 20*math.log(g2)
        dB3 = 20*math.log(g3)
        dB4 = 20*math.log(g4)
        dB5 = 20*math.log(g5)
        dB6 = 20*math.log(g6)
        dB7 = 20*math.log(g7)
        dB8 = 20*math.log(g8)
        dB9 = 20*math.log(g9)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6+dB7+dB8+dB9)/9
        print(json.dumps({"length":[{"Result":"Thus  the equaliser  has been decided on the circuit for frequency response are plotted"}], "breadth":[{"Gain in db1" : str(DB)}], "bread":[{"Gain in db2" : str(dB)}]}))
    def Attenuator(self):
        R=1.2
        argument = self.arg[:]
        I1 = (float(argument[2])*(float(argument[3])*0.5))
        I2 = (float(argument[5])*(float(argument[6])*0.5))
        I3 = (float(argument[8])*(float(argument[9])*0.5))
        I4 = (float(argument[11])*(float(argument[12])*0.5))
        I5 = (float(argument[14])*(float(argument[15])*0.5))
        O1 = (I1**2/R)*10**3
        O2 = (I2**2/R)*10**3
        O3 = (I3**2/R)*10**3
        O4 = (I4**2/R)*10**3
        O5 = (I5**2/R)*10**3
        D1 = 10*math.log(O1/I1)
        D2 = 10*math.log(O2/I2)
        D3 = 10*math.log(O3/I3)
        D4 = 10*math.log(O4/I4)
        D5 = 10*math.log(O5/I5)
        D=(D1+D2+D3+D4+D5)/5
        Vin=1.4
        G1 = (float(argument[17]))/Vin
        G2 = (float(argument[19]))/Vin
        G3 = (float(argument[21]))/Vin
        G4 = (float(argument[23]))/Vin
        G5 = (float(argument[25]))/Vin
        G6 = (float(argument[27]))/Vin
        G7 = (float(argument[29]))/Vin
        G8 = (float(argument[31]))/Vin
        G9 = (float(argument[33]))/Vin
        G10 = (float(argument[35]))/Vin
        DB1 = 20*math.log(G1)
        DB2 = 20*math.log(G2)
        DB3 = 20*math.log(G3)
        DB4 = 20*math.log(G4)
        DB5 = 20*math.log(G5)
        DB6 = 20*math.log(G6)
        DB7 = 20*math.log(G7)
        DB8 = 20*math.log(G8)
        DB9 = 20*math.log(G9)
        DB10 = 20*math.log(G10)
        DB=(DB1+DB2+DB3+DB4+DB5+DB6+DB7+DB8+DB9+DB10)/10
        Vin=1.2
        g1 = (float(argument[37])*0.1)/Vin
        g2 = (float(argument[39])*0.1)/Vin
        g3 = (float(argument[41])*0.1)/Vin
        g4 = (float(argument[43])*0.1)/Vin
        g5 = (float(argument[45])*0.1)/Vin
        g6 = (float(argument[47])*0.1)/Vin
        g7 = (float(argument[49])*0.1)/Vin
        g8 = (float(argument[51])*0.1)/Vin
        g9 = (float(argument[53])*0.1)/Vin
        g10 = (float(argument[55])*0.1)/Vin
        dB1 = 20*math.log(g1)
        dB2 = 20*math.log(g2)
        dB3 = 20*math.log(g3)
        dB4 = 20*math.log(g4)
        dB5 = 20*math.log(g5)
        dB6 = 20*math.log(g6)
        dB7 = 20*math.log(g7)
        dB8 = 20*math.log(g8)
        dB9 = 20*math.log(g9)
        dB10 = 20*math.log(g10)
        dB=(dB1+dB2+dB3+dB4+dB5+dB6+dB7+dB8+dB9+dB10)/10
        print(json.dumps({"length":[{"Result":"Thus  the various attenuator  circuit design and output waveform are verified and graph for plotted."}], "breadth":[{"Output Waveform 1" : str(D)}], "bread":[{"Output waveform 2" : str(DB)}], "bre":[{"Output waveform 3" : str(dB)}]}))









